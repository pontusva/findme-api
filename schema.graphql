### This file was generated by Nexus Schema
### Do not make changes to this file directly


type AuthResponse {
  token: String!
  userId: String!
}

type FoundPet {
  description: String
  finder: User!
  finderId: String!
  id: String!
  location: Location
  locationId: String
  photoMatches: [PhotoMatch!]!
  photoUrl: String
  status: String!
}

type Location {
  address: String
  foundPet: FoundPet
  foundPetId: String
  id: String!
  latitude: Float!
  longitude: Float!
  lostReport: LostPetReport
  lostReportId: String
}

type Logout {
  logout: Boolean!
}

type LostPetReport {
  description: String
  id: String!
  location: Location
  locationId: String
  pet: Pet!
  petId: String!
  photoMatches: [PhotoMatch!]!
  reportedBy: String!
  reporter: User!
  status: String!
  statuses: [ReportStatus!]!
}

type Microchip {
  chipNumber: String!
  id: String!
  pet: Pet!
  petId: String!
}

type Mutation {
  createLocation(address: String, foundPetId: String, latitude: Float!, longitude: Float!, lostReportId: String): Location!
  createLostPetReport(description: String, locationId: String, petId: String!, reportedBy: String!, status: String): LostPetReport!
  createNotification(email: String!, message: String!, name: String!, phone: String!, userId: String!): Notification!
  createPet(age: Int, breed: String, description: String, gender: String, microchipId: String, name: String!, ownerId: String!, photoUrl: String, type: String!): Pet
  createUser(email: String!, name: String): User!
  login(email: String!, password: String!): AuthResponse!
  logout: Logout!
  updateLostPetReport(description: String, id: String!, locationId: String, status: String): LostPetReport!
}

type Notification {
  id: String!
  message: String!
  read: Boolean!
  recipient: User
  sender: User
  senderId: String
  userId: String!
}

type NotificationsPayload {
  latestNotifications: [Notification!]!
  newNotification: Notification!
}

type Pet {
  age: Int
  breed: String
  description: String
  gender: String
  id: String!
  lostReports: [LostPetReport!]!
  microchip: Microchip
  microchipId: String
  name: String!
  owner: PetOwner
  ownerId: String!
  photoUrl: String
  type: String!
}

type PetOwner {
  email: String!
  id: String!
  name: String!
}

type PhotoMatch {
  foundPet: FoundPet!
  foundPetId: String!
  id: String!
  lostReport: LostPetReport!
  lostReportId: String!
  similarity: Float!
}

type PushSubscription {
  auth: String!
  endpoint: String!
  id: String!
  p256dh: String!
  user: User!
  userId: String!
}

type Query {
  getAllLostPetReports: [LostPetReport!]!
  getAllLostPets: [LostPetReport!]!
  getAllUsers: [User!]!
  getFilteredPets(searchTerm: String): [LostPetReport]!
  getLostPetReport(id: String!): LostPetReport!
  getPet(id: String!): Pet!
  getPets: [Pet]!
  getUser(id: String!): User!
  getUserPets(userId: String!): [Pet!]!
  notifications(userId: String!): [Notification!]!
}

type ReportStatus {
  id: String!
  lostPetReport: LostPetReport
  note: String
  reportId: String!
  reportType: String!
  status: String!
  updatedBy: String!
  updater: User!
}

type Subscription {
  notifications(userId: String!): NotificationsPayload
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type User {
  address: String
  email: String!
  foundPets: [FoundPet!]!
  id: String!
  name: String!
  notifications: [Notification!]!
  pets: [Pet!]!
  phoneNumber: String
  reports: [LostPetReport!]!
  statusUpdates: [ReportStatus!]!
}